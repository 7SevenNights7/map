import React, { useState, useEffect, useRef } from 'react';
import {
	MapContainer,
	TileLayer,
	Marker,
	Popup,
	useMapEvents,
} from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import 'leaflet-defaulticon-compatibility';
import { LatLngExpression, LatLng } from 'leaflet';
import L from 'leaflet';
import markerIcon from 'leaflet/dist/images/marker-icon.png';
import markerShadow from 'leaflet/dist/images/marker-shadow.png';
import axios from 'axios';

// –ò–∫–æ–Ω–∫–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
const customMarker = new L.Icon({
	iconUrl: markerIcon,
	shadowUrl: markerShadow,
	iconSize: [25, 41],
	iconAnchor: [12, 41],
	popupAnchor: [1, -34],
	shadowSize: [41, 41],
});

// –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ—Ç–∫–∏
interface MarkerData {
	position: LatLngExpression;
	description: string;
	category: string;
	image?: string | null;
	createdAt: string; // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∫–∏
}

const AddMarkerToClick = ({
	addMarker,
}: {
	addMarker: (latlng: LatLng) => void;
}) => {
	useMapEvents({
		click(e) {
			addMarker(e.latlng);
		},
	});
	return null;
};

const App: React.FC = () => {
	const initialMarkers = () => {
		const savedMarkers = localStorage.getItem('markers');
		return savedMarkers ? JSON.parse(savedMarkers) : [];
	};

	const [markers, setMarkers] = useState<MarkerData[]>(initialMarkers);
	const [selectedMarker, setSelectedMarker] = useState<LatLngExpression | null>(
		null
	);
	const [description, setDescription] = useState('');
	const [category, setCategory] = useState('–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
	const [filter, setFilter] = useState('–í—Å–µ');
	const [image, setImage] = useState<string | null>(null);
	const [editingIndex, setEditingIndex] = useState<number | null>(null);
	const [searchQuery, setSearchQuery] = useState(''); // –ü–æ–ª–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø–æ–∏—Å–∫–∞

	const mapRef = useRef<any>(null); // –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ç–æ–¥–∞–º –∫–∞—Ä—Ç—ã

	const position: LatLngExpression = [51.1694, 71.4491];

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∫–∏ –≤ LocalStorage –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ markers
	useEffect(() => {
		localStorage.setItem('markers', JSON.stringify(markers));
	}, [markers]);

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–∫–∏
	const addMarker = (latlng: LatLng) => {
		setSelectedMarker(latlng);
		setEditingIndex(null);
		setDescription('');
		setCategory('–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
		setImage(null);
	};

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–π –º–µ—Ç–∫–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
	const saveMarker = () => {
		if (selectedMarker && description && category) {
			const newMarker: MarkerData = {
				position: selectedMarker,
				description,
				category,
				image,
				createdAt: new Date().toLocaleString(), // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
			};
			if (editingIndex !== null) {
				const updatedMarkers = [...markers];
				updatedMarkers[editingIndex] = newMarker;
				setMarkers(updatedMarkers);
			} else {
				setMarkers((prevMarkers) => [...prevMarkers, newMarker]);
			}
			setSelectedMarker(null);
			setDescription('');
			setCategory('–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
			setImage(null);
			setEditingIndex(null);
		}
	};

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
	const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
		const file = e.target.files?.[0];
		if (file) {
			const reader = new FileReader();
			reader.onloadend = () => {
				setImage(reader.result as string);
			};
			reader.readAsDataURL(file);
		}
	};

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–∫–∏
	const editMarker = (index: number) => {
		const marker = markers[index];
		setSelectedMarker(marker.position);
		setDescription(marker.description);
		setCategory(marker.category);
		setImage(marker.image || null);
		setEditingIndex(index);
		flyToMarker(marker.position); // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—Ç–∫–µ
	};

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ç–∫–∏
	const deleteMarker = (index: number) => {
		const updatedMarkers = markers.filter((_, i) => i !== index);
		setMarkers(updatedMarkers);
	};

	// –§–∏–ª—å—Ç—Ä –º–µ—Ç–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
	const filteredMarkers = markers.filter(
		(marker) =>
			(filter === '–í—Å–µ' || marker.category === filter) &&
			marker.description.toLowerCase().includes(searchQuery.toLowerCase()) // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
	);

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—Ç–∫–µ
	const flyToMarker = (position: LatLngExpression) => {
		if (mapRef.current) {
			mapRef.current.flyTo(position, 15);
		}
	};

	return (
		<div style={{ display: 'flex', height: '100vh' }}>
			{/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–∫–∞–º–∏ */}
			<div
				style={{
					width: '300px',
					overflowY: 'auto',
					backgroundColor: '#f7f7f7',
					padding: '10px',
				}}
			>
				<h3>–ú–µ—Ç–∫–∏</h3>
				{/* –ü–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ */}
				<input
					type="text"
					placeholder="–ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é..."
					value={searchQuery}
					onChange={(e) => setSearchQuery(e.target.value)}
					style={{ width: '100%', marginBottom: '10px' }}
				/>
				<table style={{ width: '100%', borderCollapse: 'collapse' }}>
					<thead>
						<tr>
							<th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
							<th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
							<th>–î–∞—Ç–∞</th>
							<th>–î–µ–π—Å—Ç–≤–∏—è</th>
						</tr>
					</thead>
					<tbody>
						{filteredMarkers.map((marker, index) => (
							<tr key={index} style={{ borderBottom: '1px solid #ccc' }}>
								<td>{marker.description}</td>
								<td>{marker.category}</td>
								<td>{marker.createdAt}</td>
								<td>
									<button onClick={() => editMarker(index)}>‚úèÔ∏è</button>
									<button onClick={() => deleteMarker(index)}>üóëÔ∏è</button>
								</td>
							</tr>
						))}
					</tbody>
				</table>
			</div>

			{/* –ö–∞—Ä—Ç–∞ */}
			<div style={{ flex: 1 }}>
				<MapContainer
					center={position}
					zoom={13}
					style={{ height: '100%' }}
					ref={mapRef} // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –∫ —Å—Å—ã–ª–∫–µ
				>
					<TileLayer
						url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
						attribution='&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
					/>

					<AddMarkerToClick addMarker={addMarker} />

					{filteredMarkers.map((marker, index) => (
						<Marker key={index} position={marker.position} icon={customMarker}>
							<Popup>
								<b>{marker.category}</b>
								<br />
								{marker.description}
								<br />
								{marker.image && (
									<img
										src={marker.image}
										alt="uploaded"
										style={{ width: '100px', height: '100px' }}
									/>
								)}
							</Popup>
						</Marker>
					))}

					{selectedMarker && (
						<Marker position={selectedMarker} icon={customMarker}>
							<Popup>
								<div>
									<h3>
										{editingIndex !== null
											? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–∫—É'
											: '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ'}
									</h3>
									<input
										type="text"
										placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞"
										value={description}
										onChange={(e) => setDescription(e.target.value)}
									/>
									<br />
									<label>
										–ö–∞—Ç–µ–≥–æ—Ä–∏—è:
										<select
											value={category}
											onChange={(e) => setCategory(e.target.value)}
										>
											<option value="–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å">
												–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
											</option>
											<option value="–†–µ—Å—Ç–æ—Ä–∞–Ω">–†–µ—Å—Ç–æ—Ä–∞–Ω</option>
											<option value="–ü—Ä–∏—Ä–æ–¥–∞">–ü—Ä–∏—Ä–æ–¥–∞</option>
										</select>
									</label>
									<br />
									<label>
										–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:
										<input
											type="file"
											accept="image/*"
											onChange={handleImageUpload}
										/>
									</label>
									<br />
									<button onClick={saveMarker}>
										{editingIndex !== null
											? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'
											: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç–∫—É'}
									</button>
								</div>
							</Popup>
						</Marker>
					)}
				</MapContainer>
			</div>
		</div>
	);
};

export default App;
